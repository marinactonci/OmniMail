// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  image         String?
  emailVerified Boolean
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  emailAccounts EmailAccount[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model EmailAccount {
  id             String         @id @default(cuid())
  userId         String
  accessToken    String         @unique
  emailAddress   String         @unique
  name           String
  nextDeltaToken String?
  provider       String
  user           User           @relation(fields: [userId], references: [id])
  threads        Thread[]
  emailAddresses EmailAddress[]

  @@map("email_account")
}

model Thread {
  id              String       @id @default(cuid())
  subject         String
  lastMessageDate DateTime
  participantIds  String[]
  accountId       String
  account         EmailAccount @relation(fields: [accountId], references: [id])

  done Boolean @default(false)

  inboxStatus Boolean @default(true)
  draftStatus Boolean @default(false)
  sentStatus  Boolean @default(false)

  emails Email[]

  @@index([accountId])
  @@index([done])
  @@index([inboxStatus])
  @@index([draftStatus])
  @@index([sentStatus])
  @@index([lastMessageDate])
}

model Email {
  id                   String                @id @default(cuid())
  threadId             String
  thread               Thread                @relation(fields: [threadId], references: [id])
  createdTime          DateTime
  lastModifiedTime     DateTime
  sentAt               DateTime
  receivedAt           DateTime
  internetMessageId    String
  subject              String
  sysLabels            String[]
  keywords             String[]
  sysClassifications   String[]
  sensitivity          Sensitivity           @default(normal)
  meetingMessageMethod MeetingMessageMethod?
  from                 EmailAddress          @relation("FromEmail", fields: [fromId], references: [id])
  fromId               String
  to                   EmailAddress[]        @relation("ToEmails")
  cc                   EmailAddress[]        @relation("CcEmails")
  bcc                  EmailAddress[]        @relation("BccEmails")
  replyTo              EmailAddress[]        @relation("ReplyToEmails")
  hasAttachments       Boolean
  body                 String?
  bodySnippet          String?
  attachments          EmailAttachment[]
  inReplyTo            String?
  references           String?
  threadIndex          String?
  internetHeaders      Json[]
  nativeProperties     Json?
  folderId             String?
  omitted              String[]

  emailLabel EmailLabel @default(inbox)

  @@index([threadId])
  @@index([emailLabel])
  @@index([sentAt])
}

enum EmailLabel {
  inbox
  sent
  draft
}

model EmailAddress {
  id            String  @id @default(cuid())
  name          String?
  address       String
  raw           String?
  sentEmails    Email[] @relation("FromEmail")
  receivedTo    Email[] @relation("ToEmails")
  receivedCc    Email[] @relation("CcEmails")
  receivedBcc   Email[] @relation("BccEmails")
  replyToEmails Email[] @relation("ReplyToEmails")

  accountId String
  account   EmailAccount @relation(fields: [accountId], references: [id])

  @@unique([accountId, address])
}

model EmailAttachment {
  id              String  @id @default(cuid())
  name            String
  mimeType        String
  size            Int
  inline          Boolean
  contentId       String?
  content         String?
  contentLocation String?
  Email           Email   @relation(fields: [emailId], references: [id])
  emailId         String
}

enum Sensitivity {
  normal
  private
  personal
  confidential
}

enum MeetingMessageMethod {
  request
  reply
  cancel
  counter
  other
}
